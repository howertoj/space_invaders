{"version":3,"sources":["src/CST.js","src/scenes/Load.js","src/scenes/Menu.js","src/scenes/Level1.js","src/scenes/Level2.js","src/scenes/Level3.js","src/scenes/Credits.js","src/main.js"],"names":["CST","SCENES","LOAD","MENU","LEVEL1","LEVEL2","LEVEL3","CREDITS","Load","key","load","image","i","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","console","log","file","src","scene","start","Phaser","Scene","Menu","Level1","Level2","Level3","Credits","Game","render","pixelArt","physics","default","arcade","debug","scale","mode","Scale","FIT","autoCenter","CENTER_BOTH"],"mappings":"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","file":"main.1e43358e.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENES: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        LEVEL1: \"LEVEL1\",\r\n        LEVEL2: \"LEVEL2\",\r\n        LEVEL3: \"LEVEL3\",\r\n        CREDITS: \"CREDITS\"\r\n    } \r\n}","import { CST } from \"../CST\";\r\nexport class Load extends Phaser.Scene {\r\n    \r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LOAD\r\n        })\r\n    }\r\n\r\n    init() {\r\n\r\n    }\r\n    preload() {\r\n        // preload files here\r\n        \r\n        // test files\r\n        this.load.image(\"gray-platform\", \"./assets/art/gray-platform.png\");\r\n        this.load.image(\"gray-square\", \"./assets/art/gray-square.png\");\r\n\r\n        //simulate loading many files\r\n        for (var i = 0; i < 100; i++) {\r\n            this.load.image(\"gray-square\" + i, \"./assets/art/gray-square.png\");\r\n        }\r\n\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff //white\r\n            }\r\n        })\r\n\r\n        /*\r\n        Loader Events:\r\n            complete - when done loading everything\r\n            progress - loader number progress in decimal\r\n        */\r\n\r\n        //simulate large load\r\n        /*\r\n        for(let i = 0; i < 100; i++){\r\n            this.load.spritesheet(\"cat\" + i, \"./assets/cat.png\", {\r\n                frameHeight: 32,\r\n                frameWidth: 32\r\n            });        \r\n        }*/\r\n\r\n        this.load.on(\"progress\", (percent) => {\r\n            loadingBar.fillRect(0, this.game.renderer.height / 2, this.game.renderer.width * percent, 50);\r\n            console.log(percent);\r\n        })\r\n\r\n        this.load.on(\"complete\", () => {\r\n            //this.scene.start(CST.SCENES.MENU, \"hello from LoadScene\");\r\n        });\r\n\r\n        this.load.on(\"load\", (file) => {\r\n            console.log(file.src)\r\n        })\r\n\r\n\r\n    }\r\n    create() {\r\n        // console.log(\"Load - Create\");\r\n        this.scene.start(CST.SCENES.MENU);\r\n    }\r\n}","import { CST } from \"../CST\";\r\nexport class Menu extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.MENU\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    preload() {\r\n\r\n    }\r\n    create() {\r\n\r\n    }\r\n}","import { CST } from \"../CST\";\r\nexport class Level1 extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LEVEL1\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    preload() {\r\n\r\n    }\r\n    create() {\r\n\r\n    }\r\n}","import { CST } from \"../CST\";\r\nexport class Level2 extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LEVEL2\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    preload() {\r\n\r\n    }\r\n    create() {\r\n\r\n    }\r\n}","import { CST } from \"../CST\";\r\nexport class Level3 extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LEVEL3\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    preload() {\r\n\r\n    }\r\n    create() {\r\n\r\n    }\r\n}","import { CST } from \"../CST\";\r\nexport class Credits extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.CREDITS\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    preload() {\r\n\r\n    }\r\n    create() {\r\n\r\n    }\r\n}","import { Load } from \"./scenes/Load\";\r\nimport { Menu } from \"./scenes/Menu\";\r\nimport { Level1 } from \"./scenes/Level1\";\r\nimport { Level2 } from \"./scenes/Level2\";\r\nimport { Level3 } from \"./scenes/Level3\";\r\nimport { Credits } from \"./scenes/Credits\";\r\n\r\n\r\nlet game = new Phaser.Game({\r\n    width: 800,\r\n    height: 600,\r\n    scene: [\r\n        Load, Menu, Level1, Level2, Level3, Credits\r\n    ],\r\n    render: {\r\n        pixelArt: true\r\n    },\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            debug: true\r\n        }\r\n    },\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        autoCenter: Phaser.Scale.CENTER_BOTH\r\n    }\r\n});"]}